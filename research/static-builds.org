* static builds

  Eric Timmons maintains a set of patches to SBCL to create a static builds

  See https://www.timmons.dev/posts/static-executables-with-sbcl-v2.html
  See https://github.com/daewok/sbcl/blob/static-executable-v2/README.static-executable

  As I understand all methods are based on the extraction of the linkage info from the core file
  So you need to build your application twice? (No, we will extract this information from runtime)

  Linkage info extractor is made by Eric =tools-for-build/dump-linkage-info.lisp=

  #+begin_src lisp
    (defpackage #:sb-dump-linkage-info
      (:use #:cl)
      (:export #:*libdl-symbols*
	       #:dump-to-file))

    (in-package #:sb-dump-linkage-info)

    (defparameter *libdl-symbols* '("dladdr" "dlclose" "dlerror" "dlopen" "dlsym"))

    (defun dump-to-file (pn &key (make-undefined nil))
      (let ((ht (car sb-sys:*linkage-info*))
	    (undefined-entries (cdr sb-sys:*linkage-info*))
	    out)
	(loop
	  :for key :being :the :hash-keys :in ht :using (hash-value idx)
	  :for datap := (listp key)
	  :for name := (if datap (first key) key)
	  :for undefinedp := (not (null (or (member key undefined-entries :test #'equal)
					    (member name make-undefined :test #'equal))))
	  :do (push (cons idx (list name datap undefinedp)) out))
	(ensure-directories-exist pn)
	(with-open-file (s pn :direction :output :if-exists :supersede)
	  (let ((*print-pretty* nil))
	    (prin1 (mapcar #'cdr (sort out #'< :key #'car)) s))
	  (terpri s)))
      pn)
  #+end_src

  #+begin_quote
  In order to extract the linkage info from a running core, use
  tools-for-build/dump-linkage-info.lisp. After loading that into the core,
  evaluate (sb-dump-linkage-info:dump-to-file #p"/path/to/output.sexp"). It also
  takes an keyword argument :make-undefined, a list of symbol names to make
  undefined in the output.
  #+end_quote

** highlights

   #+begin_quote
   The biggest issue with creating a static executable is ensuring that foreign
   symbols are accessible from the Lisp core. In normal, dynamic use, SBCL uses
   dlsym to look up the address of symbols and stores them in a vector in foreign
   memory called the "linkage table". The lisp core then maintains a hash table
   mapping foreign symbol names to their index in the linkage table. This is
   called the linkage info.

   In a static executable, we cannot count on having a working dlsym, even if
   libdl is linked into the runtime. When performing static linkage, musl libc
   replaces all libdl functions with stubs that simply return errors. Therefore,
   we have to use the system linker to resolve the references for us. But in order
   to have the linker do that for us, we need to know at link time which foreign
   symbols our lisp code will want to use!
   #+end_quote

   Linkage table

   See http://www.sbcl.org/sbcl-internals/Linkage_002dtable.html

   #+begin_quote
   we have addresses to an mmapped memory area (LINKAGE_TABLE_SPACE) that is initialized at startup
   to contain jumps & references to the correct addresses, based on information stored on the lisp side in *LINKAGE-INFO*
   #+end_quote

   #+begin_example
   CL-USER> sb-sys:*linkage-info*
   (#<HASH-TABLE :TEST EQUAL :COUNT 424 {1000254693}>
    "SSL_CTX_set_tmp_rsa_callback" "sk_num" "sk_value" "CRYPTO_set_id_callback"
    "CRYPTO_set_locking_callback" "CRYPTO_num_locks" "SSLv3_method"
    "SSLv3_server_method" "SSLv3_client_method" "SSLv23_method"
    "SSLv23_server_method" "SSLv23_client_method" "OpenSSL_add_all_digests"
    "SSL_library_init" "SSL_load_error_strings" "SSLeay")

   CL-USER> (gethash "getuid" (car sb-sys:*linkage-info*))
   28 (5 bits, #x1C, #o34, #b11100)
   T
   CL-USER> (gethash "getpid" (car sb-sys:*linkage-info*))
   27 (5 bits, #x1B, #o33, #b11011)
   T
   #+end_example

** prerequisites

   #+begin_quote
   The demo static executable contains the sb-gmp
   contrib and runs its test quite when executed. It requires that the static
   libraries for libgmp and libz are installed on your system
   #+end_quote
